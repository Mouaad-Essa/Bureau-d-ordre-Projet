generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id        String  @id @default(uuid())
  nom       String
  prenom    String
  email     String  @unique
  tel       String?
  password  String?
  picture   String?
  serviceId String?
  roleId    String?

  service   Service?   @relation(fields: [serviceId], references: [id])
  role      Role?      @relation(fields: [roleId], references: [id])

  courrierRecu   Envoi[]   @relation(name: "transferer_courrier")  // Users who signed
  courrierTransfere   Envoi[]   @relation(name: "destinataire_courrier")  // Users who signed
  signees   Depart[]   @relation(name: "SigneParRelation")  // Users who signed
  traitees  Depart[]   @relation(name: "TraiteParRelation") // Users who processed
  traiteArriv Arrivee[]  @relation(name: "TraiteArrParRelation") // Users who processed
  // One-to-many relation with PasswordReset (user can have many reset tokens, though usually only one active)
  passwordResets PasswordReset[]
}

// Password Reset table
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(512)
  expiry    DateTime
  userId    String
  utilisateur_reset Utilisateur @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Role {
  id          String  @id @default(uuid())
  nom         String
  description String?

  utilisateurs Utilisateur[]
  privileges   Role_Privilege[]
}

model Role_Privilege {
  idRole String
  idPrv  String

  role       Role      @relation(fields: [idRole], references: [id])
  privilege  Privilege @relation(fields: [idPrv], references: [id])

  @@id([idRole, idPrv]) // Composite Primary Key
}

model Privilege {
  id   String @id @default(uuid())
  nom  String

  roles Role_Privilege[]
}

model Etablissement {
  id       String @id @default(uuid())
  nom      String
  fax      String?
  adresse  String?
  ville    String?
  contact  String?
  traiteArriv Arrivee[]  @relation(name: "expediteur_Arrivee") // Users who processed
  departDestination Depart[]  @relation(name: "destination_depart") // Users who processed
  
}

model Pole {
  id          String @id @default(uuid())
  nom         String
  description String?

  divisions Division[]
}

model Division {
  id          String @id @default(uuid())
  nom         String
  description String?
  poleId      String?

  pole        Pole?   @relation(fields: [poleId], references: [id])
  services    Service[]
}

model Service {
  id          String @id @default(uuid())
  nom         String
  description String?
  divisionId  String?

  division    Division?  @relation(fields: [divisionId], references: [id])
  utilisateurs Utilisateur[]
}

model Depart {
  id          String  @id @default(uuid())
  signeParId  String?
  traiteParId String?
  numOrdre    String?
  dateDepart  DateTime
  objet       String
  destinationId String
  nbrFichier  Int
  courrierId String?  @unique

  courrier  Courrier? @relation(fields: [courrierId], references: [id])
  destination Etablissement? @relation(name : "destination_depart",fields: [destinationId], references: [id])
  signePar   Utilisateur? @relation(name: "SigneParRelation", fields: [signeParId], references: [id])
  traitePar  Utilisateur? @relation(name: "TraiteParRelation", fields: [traiteParId], references: [id])

  fichiers   Fichier[]
}

model Fichier {
  id         String  @id @default(uuid())
  nom        String
  url        String
  dateAjout  DateTime
  idDepart   String?
  idArrivee  String?

  depart     Depart?   @relation(fields: [idDepart], references: [id])
  arrivee    Arrivee?  @relation(fields: [idArrivee], references: [id])
}

model Courrier{
  id         String  @id @default(uuid())

  arrivee  Arrivee[]
  depart Depart?
  envoi Envoi[]

}
model Arrivee {
  id          String  @id @default(uuid())
  idOrdre     String?
  dateArv     DateTime
  dateOrigin  DateTime
  expediteurId  String
  objet       String
  numero      String
  nbrFichier  Int
  typeSupport String?
  typeCourrier String?
  traiteParId String?
  courrierId String? 

  courrier  Courrier? @relation(fields: [courrierId], references: [id])
  expediteur Etablissement? @relation(name : "expediteur_Arrivee",fields: [expediteurId], references: [id])
  traitePar  Utilisateur? @relation(name: "TraiteArrParRelation", fields: [traiteParId], references: [id])
  fichiers    Fichier[]
} 

model Envoi {
  id          String   @id @default(uuid())
  expediteurId  String   
  destinataireId String  
  note String?
  courrierId  String
  createdAt   DateTime @default(now())
  expediteur Utilisateur? @relation(name: "transferer_courrier", fields: [expediteurId], references: [id])
  destinataire Utilisateur? @relation(name: "destinataire_courrier", fields: [destinataireId], references: [id])
  courrier    Courrier @relation(fields: [courrierId], references: [id])
}