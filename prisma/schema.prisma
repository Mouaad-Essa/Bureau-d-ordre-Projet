generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id        String  @id @default(uuid())
  nom       String
  prenom    String
  email     String  @unique
  tel       String?
  password  String?
  picture   String?
  serviceId String?
  roleId    String?

  service   Service?   @relation(fields: [serviceId], references: [id])
  role      Role?      @relation(fields: [roleId], references: [id])

  signees   Depart[]   @relation(name: "SigneParRelation")  // Users who signed
  traitees  Depart[]   @relation(name: "TraiteParRelation") // Users who processed
  traiteArriv Arrivee[]  @relation(name: "TraiteArrParRelation") // Users who processed
}


model Role {
  id          String  @id @default(uuid())
  nom         String
  description String?

  utilisateurs Utilisateur[]
  privileges   Role_Privilege[]
}

model Role_Privilege {
  idRole String
  idPrv  String

  role       Role      @relation(fields: [idRole], references: [id])
  privilege  Privilege @relation(fields: [idPrv], references: [id])

  @@id([idRole, idPrv]) // Composite Primary Key
}

model Privilege {
  id   String @id @default(uuid())
  nom  String

  roles Role_Privilege[]
}

model Etablissement {
  id       String @id @default(uuid())
  nom      String
  fax      String?
  adresse  String?
  ville    String?
  contact  String?
}

model Pole {
  id          String @id @default(uuid())
  nom         String
  description String?

  divisions Division[]
}

model Division {
  id          String @id @default(uuid())
  nom         String
  description String?
  poleId      String?

  pole        Pole?   @relation(fields: [poleId], references: [id])
  services    Service[]
}

model Service {
  id          String @id @default(uuid())
  nom         String
  description String?
  divisionId  String?

  division    Division?  @relation(fields: [divisionId], references: [id])
  utilisateurs Utilisateur[]
}

model Depart {
  id          String  @id @default(uuid())
  signeParId  String?
  traiteParId String?
  numOrdre    String?
  dateDepart  DateTime
  objet       String
  destination String
  nbrFichier  Int

  signePar   Utilisateur? @relation(name: "SigneParRelation", fields: [signeParId], references: [id])
  traitePar  Utilisateur? @relation(name: "TraiteParRelation", fields: [traiteParId], references: [id])

  fichiers   Fichier[]
}

model Fichier {
  id         String  @id @default(uuid())
  nom        String
  url        String
  dateAjout  DateTime
  idDepart   String?
  idArrivee  String?

  depart     Depart?   @relation(fields: [idDepart], references: [id])
  arrivee    Arrivee?  @relation(fields: [idArrivee], references: [id])
}

model Arrivee {
  id          String  @id @default(uuid())
  idOrdre     String?
  dateArv     DateTime
  dateOrigin  DateTime
  expediteur  String
  objet       String
  numero      String
  nbrFichier  Int
  typeSupport String?
  typeCourrier String?
  traiteParId String?

  traitePar  Utilisateur? @relation(name: "TraiteArrParRelation", fields: [traiteParId], references: [id])

  fichiers    Fichier[]
}